#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Função para trocar duas strings
void swap(char *a, char *b) {
    char *temp = malloc(strlen(a) + 1);
    strcpy(temp, a);
    strcpy(a, b);
    strcpy(b, temp);
    free(temp);
}

// Função de ordenação usando o Bubble Sort para strings
void bubbleSortStrings(char *arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (strcmp(arr[j], arr[j + 1]) > 0) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Uso correto: %s <arquivo_de_entrada.txt>\n", argv[0]);
        return 1;
    }

    // Abrir o arquivo de entrada
    FILE *arquivoEntrada = fopen(argv[1], "r");
    if (arquivoEntrada == NULL) {
        perror("Erro ao abrir o arquivo de entrada");
        return 1;
    }

    // Contar o número de linhas no arquivo
    int numLinhas = 0;
    char linha[100];
    while (fgets(linha, sizeof(linha), arquivoEntrada) != NULL) {
        numLinhas++;
    }

    // Voltar ao início do arquivo
    rewind(arquivoEntrada);

    // Ler as palavras do arquivo
    char **palavras = malloc(numLinhas * sizeof(char *));
    for (int i = 0; i < numLinhas; i++) {
        palavras[i] = malloc(100 * sizeof(char));
        if (fgets(palavras[i], 100, arquivoEntrada) == NULL) {
            perror("Erro ao ler palavra do arquivo");
            return 1;
        }
        // Remover o caractere de nova linha (\n) do final da palavra
        palavras[i][strlen(palavras[i]) - 1] = '\0';
    }

    // Chamar a função Bubble Sort para ordenar as palavras
    bubbleSortStrings(palavras, numLinhas);

    // Criar o arquivo de saída
    char nomeArquivoSaida[100];
    strcpy(nomeArquivoSaida, argv[1]);
    strcat(nomeArquivoSaida, "_ordenado.txt");
    FILE *arquivoSaida = fopen(nomeArquivoSaida, "w");
    if (arquivoSaida == NULL) {
        perror("Erro ao criar o arquivo de saída");
        return 1;
    }

    // Escrever as palavras ordenadas no arquivo de saída
    for (int i = 0; i < numLinhas; i++) {
        fprintf(arquivoSaida, "%s\n", palavras[i]);
    }

    // Fechar os arquivos e liberar a memória alocada
    fclose(arquivoEntrada);
    fclose(arquivoSaida);

    for (int i = 0; i < numLinhas; i++) {
        free(palavras[i]);
    }
    free(palavras);

    printf("Saída: %s\n", nomeArquivoSaida);

    return 0;
}
